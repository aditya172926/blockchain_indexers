Instance { web3: Web3 { transport: Http { client: Client { accepts: Accepts, proxies: [Proxy(System({}), None)], referer: true, default_headers: {"accept": "*/*", "user-agent": "web3.rs"} }, inner: Inner { url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("rpc-mainnet.maticvigil.com")), port: None, path: "/", query: None, fragment: None }, id: 0 
} } }, abi: Contract { constructor: Some(Constructor { inputs: [Param { name: "_logic", kind: Address, internal_type: Some("address") }, Param { name: "admin_", kind: Address, internal_type: Some("address") }, Param { name: "_data", kind: Bytes, internal_type: Some("bytes") }] }), functions: {"admin": [Function { name: "admin", inputs: [], outputs: [Param { name: "admin_", kind: Address, internal_type: Some("address") }], constant: false, state_mutability: NonPayable }], "changeAdmin": [Function { name: "changeAdmin", inputs: 
[Param { name: "newAdmin", kind: Address, internal_type: Some("address") }], outputs: [], constant: false, state_mutability: NonPayable }], "implementation": [Function { name: "implementation", inputs: [], outputs: [Param { name: "implementation_", kind: Address, internal_type: Some("address") }], constant: false, state_mutability: NonPayable }], "upgradeTo": [Function { name: "upgradeTo", inputs: [Param { name: "newImplementation", kind: Address, internal_type: Some("address") }], outputs: [], constant: false, state_mutability: NonPayable }], "upgradeToAndCall": [Function { name: "upgradeToAndCall", inputs: [Param { name: "newImplementation", kind: Address, internal_type: Some("address") }, Param { name: "data", kind: Bytes, internal_type: Some("bytes") }], outputs: [], constant: false, state_mutability: Payable }]}, events: {"AdminChanged": [Event { name: "AdminChanged", inputs: [EventParam { name: "previousAdmin", 
kind: Address, indexed: false }, EventParam { name: "newAdmin", kind: Address, indexed: false }], anonymous: false }], "BeaconUpgraded": [Event { name: "BeaconUpgraded", inputs: [EventParam { name: "beacon", kind: Address, indexed: true }], anonymous: false }], "Upgraded": [Event { name: "Upgraded", inputs: [EventParam { name: "implementation", kind: Address, indexed: true }], anonymous: false }]}, errors: {}, receive: true, fallback: true }, address: 0xdb46d1dc155634fbc732f92e853b10b288ad5a1d, deployment_information: None, defaults: MethodDefaults { from: None, gas: None, gas_price: None }, methods: {[79, 30, 242, 134]: ("upgradeToAndCall", 0), [143, 40, 57, 112]: ("changeAdmin", 0), [54, 89, 207, 230]: ("upgradeTo", 0), [248, 81, 164, 64]: ("admin", 0), [92, 96, 218, 27]: ("implementation", 0)}, events: {0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e: ("BeaconUpgraded", 0), 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f: ("AdminChanged", 0), 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b: ("Upgraded", 0)} }






Instance { web3: Web3 { transport: Http { client: Client { accepts: Accepts, proxies: [Proxy(System({}), None)], referer: true, default_headers: {"accept": "*/*", "user-agent": "web3.rs"} }, inner: Inner { url: Url { scheme: "https", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("mainnet.infura.io")), port: None, path: "/v3/c108a133505241de9e2c48894d23e483", query: None, fragment: None }, id: 0 } } }, abi: Contract { constructor: Some(Constructor { inputs: [Param { name: "account", kind: Address, internal_type: Some("address") }, Param { name: "minter_", kind: Address, internal_type: Some("address") }, Param { name: "mintingAllowedAfter_", kind: Uint(256), internal_type: Some("uint256") }] }), functions: {"DELEGATION_TYPEHASH": [Function { name: "DELEGATION_TYPEHASH", inputs: [], outputs: [Param { name: "", kind: FixedBytes(32), internal_type: Some("bytes32") }], constant: true, state_mutability: View }], "DOMAIN_TYPEHASH": [Function { name: "DOMAIN_TYPEHASH", inputs: [], outputs: [Param { name: "", kind: FixedBytes(32), 
internal_type: Some("bytes32") }], constant: true, state_mutability: View }], "PERMIT_TYPEHASH": [Function { name: "PERMIT_TYPEHASH", inputs: [], outputs: [Param { name: "", kind: FixedBytes(32), internal_type: Some("bytes32") }], constant: true, state_mutability: View }], "allowance": [Function { name: "allowance", inputs: [Param { name: "account", kind: Address, internal_type: Some("address") }, Param { name: "spender", kind: Address, internal_type: Some("address") }], outputs: [Param { name: "", kind: Uint(256), internal_type: Some("uint256") }], constant: true, state_mutability: View }], "approve": [Function { name: "approve", inputs: [Param { name: "spender", kind: Address, internal_type: Some("address") }, Param { name: "rawAmount", kind: Uint(256), internal_type: Some("uint256") }], outputs: [Param { name: "", kind: Bool, internal_type: Some("bool") }], constant: false, state_mutability: NonPayable }], "balanceOf": [Function { name: "balanceOf", inputs: [Param { name: "account", kind: Address, internal_type: Some("address") }], outputs: [Param { name: "", kind: Uint(256), internal_type: Some("uint256") }], constant: true, state_mutability: View }], "checkpoints": [Function { name: "checkpoints", inputs: [Param { name: "", kind: Address, internal_type: Some("address") }, Param { name: "", kind: Uint(32), internal_type: Some("uint32") }], outputs: [Param { name: "fromBlock", kind: Uint(32), internal_type: Some("uint32") }, Param { name: "votes", kind: Uint(96), internal_type: Some("uint96") }], constant: true, state_mutability: View }], "decimals": [Function { name: "decimals", inputs: [], outputs: [Param { name: "", kind: Uint(8), internal_type: Some("uint8") }], constant: true, state_mutability: View }], "delegate": [Function { name: "delegate", inputs: [Param { name: "delegatee", kind: Address, internal_type: Some("address") }], outputs: [], constant: false, state_mutability: NonPayable }], "delegateBySig": [Function { name: "delegateBySig", inputs: [Param { name: "delegatee", kind: Address, internal_type: Some("address") }, Param { name: "nonce", kind: Uint(256), internal_type: Some("uint256") }, Param { name: "expiry", kind: Uint(256), internal_type: Some("uint256") }, Param { name: "v", kind: Uint(8), internal_type: Some("uint8") }, Param { name: "r", kind: FixedBytes(32), internal_type: Some("bytes32") }, Param { name: "s", kind: FixedBytes(32), internal_type: Some("bytes32") }], outputs: [], constant: false, state_mutability: NonPayable }], "delegates": [Function { name: "delegates", inputs: [Param { name: "", kind: Address, internal_type: Some("address") }], outputs: [Param { name: "", kind: Address, internal_type: Some("address") }], constant: true, state_mutability: View }], "getCurrentVotes": [Function { name: "getCurrentVotes", inputs: [Param { name: "account", kind: Address, internal_type: Some("address") }], outputs: [Param { name: "", kind: Uint(96), internal_type: Some("uint96") }], constant: true, state_mutability: View }], "getPriorVotes": [Function { name: "getPriorVotes", inputs: [Param { name: "account", kind: Address, internal_type: Some("address") }, Param { name: "blockNumber", kind: Uint(256), internal_type: Some("uint256") }], outputs: [Param { name: "", kind: Uint(96), internal_type: Some("uint96") }], constant: true, state_mutability: View }], "minimumTimeBetweenMints": [Function { name: "minimumTimeBetweenMints", inputs: [], outputs: [Param { name: "", kind: Uint(32), internal_type: Some("uint32") }], constant: true, state_mutability: View }], "mint": [Function { name: "mint", inputs: [Param { name: "dst", kind: Address, internal_type: Some("address") }, Param { name: "rawAmount", kind: Uint(256), internal_type: Some("uint256") }], outputs: [], constant: false, state_mutability: NonPayable }], "mintCap": [Function { name: "mintCap", inputs: [], outputs: [Param { name: "", kind: Uint(8), internal_type: Some("uint8") }], constant: true, state_mutability: View }], "minter": [Function { name: "minter", inputs: [], outputs: [Param { name: "", kind: Address, internal_type: Some("address") }], constant: true, state_mutability: View }], "mintingAllowedAfter": [Function { name: "mintingAllowedAfter", inputs: [], outputs: [Param { name: "", kind: Uint(256), internal_type: Some("uint256") }], constant: true, state_mutability: View }], "name": [Function { name: "name", inputs: [], outputs: [Param { name: "", kind: String, internal_type: Some("string") }], constant: true, state_mutability: View }], "nonces": [Function { name: "nonces", inputs: [Param { name: "", kind: Address, internal_type: Some("address") }], outputs: [Param { name: "", kind: Uint(256), internal_type: Some("uint256") }], constant: true, state_mutability: View }], "numCheckpoints": [Function { name: "numCheckpoints", inputs: [Param { name: "", kind: Address, internal_type: Some("address") }], outputs: [Param { name: "", kind: Uint(32), internal_type: Some("uint32") }], constant: true, state_mutability: View }], "permit": [Function { name: "permit", inputs: [Param { name: "owner", kind: Address, internal_type: Some("address") }, Param { name: "spender", kind: Address, internal_type: Some("address") }, 
Param { name: "rawAmount", kind: Uint(256), internal_type: Some("uint256") }, Param { name: "deadline", kind: Uint(256), internal_type: Some("uint256") }, Param { name: "v", kind: Uint(8), internal_type: Some("uint8") }, Param { name: "r", kind: FixedBytes(32), internal_type: Some("bytes32") }, Param { name: "s", kind: FixedBytes(32), internal_type: Some("bytes32") }], outputs: [], constant: false, state_mutability: NonPayable }], "setMinter": [Function { name: "setMinter", inputs: [Param { name: "minter_", kind: Address, internal_type: Some("address") }], outputs: [], constant: false, state_mutability: NonPayable }], "symbol": [Function { name: "symbol", inputs: [], outputs: [Param { name: "", kind: String, internal_type: Some("string") }], constant: true, state_mutability: View }], "totalSupply": [Function { name: "totalSupply", inputs: [], outputs: [Param { name: "", kind: Uint(256), internal_type: Some("uint256") 
}], constant: true, state_mutability: View }], "transfer": [Function { name: "transfer", inputs: [Param { name: "dst", kind: Address, internal_type: Some("address") }, Param { name: "rawAmount", kind: Uint(256), internal_type: Some("uint256") }], outputs: [Param { name: "", kind: Bool, internal_type: Some("bool") }], constant: false, state_mutability: NonPayable }], "transferFrom": [Function { name: "transferFrom", inputs: [Param { name: "src", kind: Address, internal_type: Some("address") }, Param { name: "dst", kind: Address, internal_type: Some("address") }, Param { name: "rawAmount", kind: Uint(256), internal_type: Some("uint256") }], outputs: [Param { 
name: "", kind: Bool, internal_type: Some("bool") }], constant: false, state_mutability: NonPayable }]}, events: {"Approval": [Event 
{ name: "Approval", inputs: [EventParam { name: "owner", kind: Address, indexed: true }, EventParam { name: "spender", kind: Address, indexed: true }, EventParam { name: "amount", kind: Uint(256), indexed: false }], anonymous: false }], "DelegateChanged": [Event { name: "DelegateChanged", inputs: [EventParam { name: "delegator", kind: Address, indexed: true }, EventParam { name: "fromDelegate", kind: Address, indexed: true }, EventParam { name: "toDelegate", kind: Address, indexed: true }], anonymous: false }], "DelegateVotesChanged": [Event { name: "DelegateVotesChanged", inputs: [EventParam { name: "delegate", kind: Address, indexed: true }, EventParam { 
name: "previousBalance", kind: Uint(256), indexed: false }, EventParam { name: "newBalance", kind: Uint(256), indexed: false }], anonymous: false }], "MinterChanged": [Event { name: "MinterChanged", inputs: [EventParam { name: "minter", kind: Address, indexed: false }, EventParam { name: "newMinter", kind: Address, indexed: false }], anonymous: false }], "Transfer": [Event { name: "Transfer", inputs: [EventParam { name: "from", kind: Address, indexed: true }, EventParam { name: "to", kind: Address, indexed: true }, EventParam 
{ name: "amount", kind: Uint(256), indexed: false }], anonymous: false }]}, errors: {}, receive: false, fallback: false }, address: 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984, deployment_information: None, defaults: MethodDefaults { from: None, gas: None, gas_price: None }, methods: {[92, 25, 169, 92]: ("delegate", 0), [118, 199, 28, 161]: ("mintCap", 0), [231, 163, 36, 220]: ("DELEGATION_TYPEHASH", 0), [7, 84, 97, 114]: ("minter", 0), [126, 206, 190, 0]: ("nonces", 0), [24, 22, 13, 221]: ("totalSupply", 0), [241, 18, 126, 216]: ("checkpoints", 0), [35, 184, 114, 221]: ("transferFrom", 0), [213, 5, 172, 207]: ("permit", 0), [195, 205, 165, 32]: ("delegateBySig", 0), [180, 181, 234, 87]: ("getCurrentVotes", 0), [88, 124, 222, 30]: ("delegates", 0), [149, 216, 155, 65]: ("symbol", 0), [112, 160, 130, 49]: ("balanceOf", 0), [48, 179, 108, 239]: ("mintingAllowedAfter", 0), [6, 253, 222, 3]: ("name", 0), [169, 5, 156, 187]: ("transfer", 0), [9, 94, 167, 179]: ("approve", 0), [49, 60, 229, 103]: ("decimals", 0), [32, 96, 107, 112]: ("DOMAIN_TYPEHASH", 0), [92, 17, 214, 47]: ("minimumTimeBetweenMints", 0), [120, 45, 111, 225]: ("getPriorVotes", 0), [64, 193, 15, 25]: ("mint", 0), [48, 
173, 248, 31]: ("PERMIT_TYPEHASH", 0), [221, 98, 237, 62]: ("allowance", 0), [111, 207, 255, 69]: ("numCheckpoints", 0), [252, 163, 181, 170]: ("setMinter", 0)}, events: {0x3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6: ("MinterChanged", 0), 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724: ("DelegateVotesChanged", 0), 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef: ("Transfer", 0), 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925: ("Approval", 0), 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f: ("DelegateChanged", 0)} }